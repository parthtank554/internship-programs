CREATE DATABASE IF NOT EXISTS story_share;
USE story_share;

-- Users Table
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    full_name VARCHAR(100),
    profile_pic VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Stories Table
CREATE TABLE IF NOT EXISTS stories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    media_url VARCHAR(255) NOT NULL,
    media_type ENUM('image', 'video') DEFAULT 'image',
    duration INT DEFAULT 30,  -- Duration in seconds
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Story Views Table
CREATE TABLE IF NOT EXISTS story_views (
    id INT AUTO_INCREMENT PRIMARY KEY,
    story_id INT NOT NULL,
    user_id INT NOT NULL,
    viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (story_id) REFERENCES stories(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE KEY (story_id, user_id)
);

-- Story Likes Table
CREATE TABLE IF NOT EXISTS story_likes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    story_id INT NOT NULL,
    user_id INT NOT NULL,
    liked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (story_id) REFERENCES stories(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE KEY (story_id, user_id)
);

-- Story Replies Table
CREATE TABLE IF NOT EXISTS story_replies (
    id INT AUTO_INCREMENT PRIMARY KEY,
    story_id INT NOT NULL,
    user_id INT NOT NULL,
    message TEXT NOT NULL,
    replied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (story_id) REFERENCES stories(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Stored Procedures for User Operations
DELIMITER //

-- Register User
CREATE PROCEDURE RegisterUser(IN p_username VARCHAR(100), IN p_email VARCHAR(100), IN p_password VARCHAR(255), IN p_full_name VARCHAR(100))
BEGIN
    INSERT INTO users (username, email, password, full_name) VALUES (p_username, p_email, p_password, p_full_name);
    SELECT LAST_INSERT_ID() as user_id;
END //

-- Get User By Username
CREATE PROCEDURE GetUserByUsername(IN p_username VARCHAR(100))
BEGIN
    SELECT * FROM users WHERE username = p_username;
END //

-- Get User By Email
CREATE PROCEDURE GetUserByEmail(IN p_email VARCHAR(100))
BEGIN
    SELECT * FROM users WHERE email = p_email;
END //

-- Get User By ID
CREATE PROCEDURE GetUserById(IN p_id INT)
BEGIN
    SELECT * FROM users WHERE id = p_id;
END //

-- Update User Profile
CREATE PROCEDURE UpdateUserProfile(IN p_id INT, IN p_full_name VARCHAR(100), IN p_profile_pic VARCHAR(255))
BEGIN
    UPDATE users SET full_name = p_full_name, profile_pic = p_profile_pic WHERE id = p_id;
end //

-- Stored Procedures for Story Operations
CREATE PROCEDURE CreateStory(IN p_user_id INT, IN p_media_url VARCHAR(255), IN p_media_type ENUM('image', 'video'), IN p_duration INT)
BEGIN
    INSERT INTO stories (user_id, media_url, media_type, duration, expires_at) 
    VALUES (p_user_id, p_media_url, p_media_type, p_duration, DATE_ADD(NOW(), INTERVAL 1 DAY));
    SELECT LAST_INSERT_ID() as story_id;
END //

-- Get Active Stories
CREATE PROCEDURE GetActiveStories()
BEGIN
    SELECT s.*, u.username, u.profile_pic 
    FROM stories s
    JOIN users u ON s.user_id = u.id
    WHERE s.expires_at > NOW()
    ORDER BY s.created_at DESC;
END //

-- Get User Stories
CREATE PROCEDURE GetUserStories(IN p_user_id INT)
BEGIN
    SELECT * FROM stories 
    WHERE user_id = p_user_id AND expires_at > NOW()
    ORDER BY created_at DESC;
END //

-- Get Story Details
CREATE PROCEDURE GetStoryDetails(IN p_story_id INT)
BEGIN
    -- Get story info
    SELECT s.*, u.username, u.profile_pic 
    FROM stories s
    JOIN users u ON s.user_id = u.id
    WHERE s.id = p_story_id;
    
    -- Get views
    SELECT v.*, u.username, u.profile_pic 
    FROM story_views v
    JOIN users u ON v.user_id = u.id
    WHERE v.story_id = p_story_id
    ORDER BY v.viewed_at DESC;
    
    -- Get likes
    SELECT l.*, u.username, u.profile_pic 
    FROM story_likes l
    JOIN users u ON l.user_id = u.id
    WHERE l.story_id = p_story_id
    ORDER BY l.liked_at DESC;
    
    -- Get replies
    SELECT r.*, u.username, u.profile_pic 
    FROM story_replies r
    JOIN users u ON r.user_id = u.id
    WHERE r.story_id = p_story_id
    ORDER BY r.replied_at DESC;
END //

-- Add Story View
CREATE PROCEDURE AddStoryView(IN p_user_id INT, IN p_story_id INT)
BEGIN
    INSERT IGNORE INTO story_views (user_id, story_id) VALUES (p_user_id, p_story_id);
END //

-- Add Story Like
CREATE PROCEDURE AddStoryLike(IN p_user_id INT, IN p_story_id INT)
BEGIN
    INSERT IGNORE INTO story_likes (user_id, story_id) VALUES (p_user_id, p_story_id);
END //

-- Add Story Reply
CREATE PROCEDURE AddStoryReply(IN p_user_id INT, IN p_story_id INT, IN p_message TEXT)
BEGIN
    INSERT INTO story_replies (user_id, story_id, message) VALUES (p_user_id, p_story_id, p_message);
END //


DELIMITER $$

CREATE PROCEDURE GETSINGLESTORYBYID(IN p_story_id INT)
BEGIN
    SELECT 
        s.id,
        s.user_id,
        u.username,
        u.profile_pic,
        s.media_url,
        s.media_type,
        s.duration,
        s.created_at
    FROM stories s
    JOIN users u ON s.user_id = u.id
    WHERE s.id = p_story_id
      AND TIMESTAMPDIFF(HOUR, s.created_at, NOW()) <= 24; -- Ensures it's still active (24 hrs)
END $$

DELIMITER ;


SHOW PROCEDURE STATUS WHERE Db = 'story_share';